				OBJECT ORIENTED PROGRAMMING

			WHAT IS OBJECT-ORIENTED PROGRAMMING?


Object-Oriented Programming, or "OOP", is a pattern for writing clean and maintainable code. Not everyone agrees that object-oriented principles are the best way to write code, but, to be a good engineer, you should at least understand them.

			CLEAN CODE

Paradigms like object-oriented programming and functional programming are all about making code easier to work with and understand as the feeble humans we are. Code that's easy for humans to understand is called "clean code".

"Any fool can write code that a computer can understand. Good programmers write code that humans can understand."
-- Martin Fowler

			CLEAN CODE DOES NOT


1. Make your programs run faster
2. Make your programs function correctly
3. Only occur in object-oriented programming

			CLEAN CODE DOES


1. Make code easier to work with
2. Make it easier to find and fix bugs
3. Make the development process faster
4. Help us retain our sanity

			DRY CODE


Another "rule of thumb" for writing maintainable code is "Don't Repeat Yourself" (DRY). It just means that, when possible, you should avoid writing the same code in multiple places. Repeating code can be bad because:

*If you need to change it, you have to change it in multiple places
*If you forget to change it in one place, you'll have a bug
*It's more work to write it over and over again

			DON'T REPEAT YOURSELF (DRY)


We don't want too much of our code doing the same thing. When code is duplicated, it leads to many potential problems. In our example, let's pretend the soldier dictionary changed, and now the key that stores the "damage" value is called dmg.

In the first example, we would need to update two lines of code. In the second example, we only need to make the change in one place.

It's not a big deal when two lines are the same and exist right next to each other. However, imagine if we had done this several hundred times in ten or twenty different code files! All of the sudden, it makes a lot of sense to stop repeating yourself and write more reusable functions. We call that DRY code.

			CLASSES(coustom types)


A class is a special type of value in an object-oriented programming language like Python. It's similar to a dictionary in that it usually stores other types inside itself.

# Defines a new class called "Soldier"
class Soldier:
    health = 5
    armor = 3
    damage = 2

Just like a string, integer or float, a class is a type, but instead of being a built-in type, your classes are custom types that you define.

An object is just an instance of a class type. For example:

health = 50
# health is an instance of an integer type

aragorn = Soldier()
# aragorn is an instance of the Soldier type (class)

"Classes" are custom new types that we define as the programmer. Each new instance of a class is an "object".

EXAMPLE

class Archer:
    health = 40
    arrows = 10

# Create several instances of the Archer class
legolas = Archer()
bard = Archer()

# Print class properties
print(legolas.health) # 40
print(bard.arrows) # 10

			METHODS


After the last exercise, you might be wondering why classes are useful, they're like dictionaries... but worse!

One thing that makes classes cool is that we can define methods on them. A method is a function that's tied directly to a class and has access to all its properties.

class Soldier:
    health = 5

    def take_damage(self, damage):
        self.health -= damage

soldier_one = Soldier()
soldier_one.take_damage(2)
print(soldier_one.health)
# prints "3"

			SELF


Methods are nested within the class declaration. Their first parameter is always the instance of the class that the method is being called on. By convention, it's called "self". Because self is a reference to the object, you can use it to read and update the properties of the object.

Notice that methods are called directly on an object using the dot operator.

my_object.my_method()

			METHODS RETURN VALUES


If a normal function doesn't return anything, it's typically not a very useful function. In contrast, methods often don't return anything explicitly because they can mutate the properties of the object instead. That's exactly what we did in the last assignment.

However, they can return values if you want! They're just functions with access to an object, after all.

			METHODS VS FUNCTIONS


You know what a function is. A method has all the same properties as a function, but it is tied directly to a class and has access to all its properties.

A method automatically receives the object it was called on as its first parameter.

class Soldier:
    health = 5

    def take_damage(self, damage, multiplier):
        damage = damage * multiplier
        self.health -= damage

dalinar = Soldier()
damage, multiplier = 30, 3

# Only "damage" and "multiplier" are passed as arguments
# "dalinar" is passed implicitly as the first argument, "self"
dalinar.take_damage(damage, multiplier)

A method can operate on data that is contained within the class. In other words, you won't always see all the "outputs" in the return statement because the method might just mutate the object's properties directly.

			THE OOP DEBATE


Because functions are more explicit, some developers argue that functional programming is better than object-oriented programming. In reality, neither paradigm is "better", and the best developers learn and understand both styles and use them as they see fit.

For example, while methods are more implicit and often make code more difficult to read, they also make it easier to group a program's data and behavior in one place, which can lead to a more organized codebase.

			CONSTRUCTORS (OR INITIALIZERS)


It's rare in the real world to see a class that defines properties the way we've been doing it:

class Soldier:
    name = "Legolas"
    armor = 2
    num_weapons = 2

It's more practical to use a constructor. In Python, if you name a method __init__, that's the constructor and it is called when a new object is created.

class Soldier:
    def __init__(self):
        self.name = "Legolas"
        self.armor = 2
        self.num_weapons = 2

Now we can make the starting armor and number of weapons configurable with some parameters!

class Soldier:
    def __init__(self, name, armor, num_weapons):
        self.name = name
        self.armor = armor
        self.num_weapons = num_weapons

soldier = Soldier("Legolas", 5, 10)
print(soldier.name)
# prints "Legolas"
print(soldier.armor)
# prints "5"
print(soldier.num_weapons)
# prints "10"

EXAMPLE2
class Wall:
    def __init__(self, depth, height, width):
        self.depth = depth
        self.height = height
        self.width = width
        self.volume = depth * height * width

			MULTIPLE OBJECTS


An object is an "instance" of a class. Let's look at what that means.

"In object-oriented programming, an instance is a concrete occurrence of any object... "Instance" is synonymous with "object" as they are each a particular value... "Instance" emphasizes the distinct identity of the object. The creation of an instance is called instantiation."
-- Wikipedia

So for our wall class, I can create three different "instances" of the class. Or, in other words, I can create three separate objects.

wall_maria = Wall(1, 2, 3)
wall_rose = Wall(4, 5, 6)
wall_sina = Wall(9, 8, 7)

In the example above, the variables are instances of the Wall type.

			CLASS VARIABLES VS INSTANCE VARIABLES


So far we've worked with both class variables and instance variables, but we haven't talked about the difference.

			INSTANCE VARIABLES


Instance variables vary from object to object and are declared in the constructor.

class Wall:
    def __init__(self):
        self.height = 10

south_wall = Wall()
south_wall.height = 20 # only updates this instance of a wall
print(south_wall.height)
# prints "20"

north_wall = Wall()
print(north_wall.height)
# prints "10"

			CLASS VARIABLES


Class variables remain the same between instances of the same class and are declared at the top level of a class definition.

class Wall:
    height = 10

south_wall = Wall()
print(south_wall.height)
# prints "10"

Wall.height = 20 # updates all instances of a Wall

print(south_wall.height)
# prints "20"

In other languages these types of variables are often called static variables.

			WHICH SHOULD I USE?


Generally speaking, stay away from class variables. Just like global variables, class variables are usually a bad idea because they make it hard to keep track of which parts of your program are making updates. However, it is important to understand how they work because you may see them out in the wild.

			ENCAPSULATION


Encapsulation is the practice of hiding complexity inside a "black box" so that it's easier to focus on the problem at hand.

The most basic example of encapsulation is a function. The caller of a function doesn't need to worry too much about what happens inside, they just need to understand the inputs and outputs.

acceleration = calc_acceleration(initial_speed, final_speed, time)

To use the calc_acceleration function, we don't need to think about every individual line of code inside the function. We just need to know that if we give it the inputs:

initial_speed
final_speed
time

Then it will give us the correct acceleration as an output.

			PUBLIC AND PRIVATE


By default, all properties and methods in a class are public. That means that you can access them with the . operator:

wall.height = 10
print(wall.height)
# 10

Private data members are how we encapsulate logic and data within a class. To make a property or method private, you just need to prefix it with two underscores.

class Wall:
    def __init__(self, armor, magic_resistance):
        self.__armor = armor
        self.__magic_resistance = magic_resistance

    def get_defense(self):
        return self.__armor + self.__magic_resistance

front_wall = Wall(10, 20)

# This results in an error
print(front_wall.__armor)

# This works
print(front_wall.get_defense())
# 30

We do this because, in this example, armor and magic_resistance are implementation details. After creating a Wall, they don't matter anymore. Now the game developers can just call get_defense and not worry about how it's calculated under the hood.

			NOT SECURITY

Encapsulation is the practice of hiding code complexity inside a "black box" so that other developers working with the code don't have to worry about it.

To be clear, it does not make the code more secure in a cryptographic or cyber-security sense. That's a point I was personally confused about when I was first learning about private and public class members.

Encapsulation is about organization, not security.

Encapsulation is like folders in an unlocked filing cabinet. They don't stop someone from peeking inside, but they do keep everything tidy and easy to find.

			ENCAPSULATION IN PYTHON


Python is a dynamic language, and that makes it difficult for the interpreter to enforce some of the safeguards that languages like Go do. That's why encapsulation in Python is achieved mostly by convention rather than by force.

Prefixing methods and properties with a double underscore is a strong suggestion to the users of your class that they shouldn't be touching that stuff. If a developer wants to break convention, there are ways to get around the double underscore rule.

class Wall:
    def __init__(self, height):
        # the double underscore make this a private property
        # but it's not strictly enforced, there are hacks to get around it
        self.__height = height

    def get_height(self):
        return self.__height

			ABSTRACTION


Abstraction helps us handle complexity by hiding unnecessary details. Sounds like encapsulation, right? They're so similar that it's almost not worth worrying about the difference...almost.

			ABSTRACTION VS ENCAPSULATION


*Abstraction is about creating a simple interface for complex behavior. It focuses on what's exposed.
*Encapsulation is about hiding internal state. It focuses on tucking implementation details away so no one depends on them.

Abstraction is more about reducing complexity, encapsulation is more about maintaining the integrity of system internals.

			ARE WE ENCAPSULATING OR ABSTRACTING?


Both. Almost always we are doing both. Here's an example of using the random library to generate a random number:

import random

attack_damage = random.randrange(5)

Generating random numbers is a really hard problem. The operating system uses the physical hardware of the computer to create a seed for the randomness. However, the developers of the random library have abstracted that complexity away and encapsulated it within the simple randrange function. We just say "I want a random number from 0 to 4" and the library does it.

When writing libraries for use by other developers, getting the abstractions right is crucial because changing them later can be disastrous. Imagine if the maintainers of the random changed the input parameters to the randrange function! It would break code all over the world.

			ABSTRACTION VS ENCAPSULATION QUIZ


You may have noticed already, but... abstraction and encapsulation are basically the same thing. They just emphasize different aspects of the same concept.

Abstraction is about reducing complexity. Creating good abstractions is particularly crucial when you're developing libraries for other developers to use. For example, the built-in pow function in Python is an abstraction that hides the complexity of calculating exponents.

pow isn't magic. Somewhere, code that does something like this exists and is called when you use pow:

def pow(base, exponent):
    result = 1
    for _ in range(exponent):
        result *= base
    return result

			HOW OOP DEVELOPERS THINK


Classes in object-oriented programming are all about grouping data and behavior together in one place: an object. Object-oriented programmers tend to think about programming as a modeling problem. They think:

"How can I write a Human class that holds the data and simulates the behavior of a real human?"

To provide some contrast, functional programmers tend to think of their code as inputs and outputs, and how those inputs and outputs transition the world from one state to the next:

"When a human takes a step, what's the new state of the game?"

			BOTH PARADIGMS ARE VALUABLE


OOP isn't the only pattern for organizing code, but it's one of the more popular ones. If you understand multiple ways of thinking about code, you'll be a much better developer overall.


			Inheritance


We've made it to the holy grail of object-oriented programming: inheritance. Non-OOP languages like Go and Rust allow for encapsulation and abstraction features as nearly every language does. Inheritance, on the other hand, tends to be unique to class-based languages like Python, Java, and Ruby.

			What is inheritance?


Inheritance allows one class, the "child" class, to inherit the properties and methods of another class, the "parent" class.

This powerful language feature helps us avoid writing a lot of the same code twice. It allows us to DRY (don't repeat yourself) up our code.

			Syntax


Here Cow is a "child" class that inherits from the "parent" class Animal:

class Animal:
    # parent "Animal" class

class Cow(Animal):
    # child class "Cow" inherits "Animal"

The Cow class can reuse the Animal class's constructor with the super() method:

class Animal:
    def __init__(self, num_legs):
        self.num_legs = num_legs

class Cow(Animal):
    def __init__(self):
        # call the parent constructor to
        # give the cow some legs
        super().__init__(4)

			When should I use inheritance?


Inheritance is a powerful tool, but it is a really bad idea to try to overuse it. Inheritance should only be used when all instances of a child class are also instances of the parent class.

When a child class inherits from a parent, it inherits everything. If you only want to share some functionality, inheritance is probably not the best answer. Better to simply share some functions, or maybe make a new parent class that both classes can inherit from.

All cats are animals but not all animals are cats:

			Inheritance Hierarchy

There is no limit to how deeply we can nest an inheritance tree. For example, a Cat can inherit from an Animal that inherits from LivingThing. That said, be careful! New programmers often get carried away.

You should never think to yourself:

"Well most wizards are elves... so I'll just have wizard inherit from elf"A good child class is a strict subset of its parent class.

A good child class is a strict subset of its parent class.

An example of this with private properties. A child class cannot simple access a private property of its parent class. It has to use a getter. For example:

class Wall:
    def __init__(self, height):
        self.__height = height

    def get_height(self):
        return self.__height

class Castle(Wall):
    def __init__(self, height, towers):
        super().__init__(height)
        self.towers = towers

    def get_tower_height(self):
        return self.get_height() * 2

			Inheritance Review


Example of inheritance in code:

class RealEstate:
    def __init__(self, location):
        self.__location = location


class Residential(RealEstate):
    def __init__(self, location, bedrooms):
        super().__init__(location)
        self.__bedrooms = bedrooms


class House(Residential):
    def __init__(self, location, bedrooms, yard_size):
        super().__init__(location, bedrooms)
        self.__yard_size = yard_size

			Multiple children


So far we've worked with linear class inheritance, but usually, inheritance hierarchies form trees, not lines. A parent class can have multiple children.

			Multiple children quiz


You'll often find that it's more likely that an inheritance tree is wide than deep. In other words, instead of a deep tree like:

			Why are inheritance trees often wide instead of deep?


As we talked about earlier, in good software a child class is a strict subset of its parent class. In a deep tree, that means the children need to be perfect members of all the parent class "types". That simply doesn't happen very often in the real world. It's much more likely that you'll have a base class that simply has many sibling classes that are slightly different variations of the base.

			What is polymorphism?


While inheritance is the most unique trait of object-oriented languages, polymorphism is probably the most powerful. Polymorphism is the ability of a variable, function or object to take on multiple forms.

"poly"="many"
"morph"="form".

For example, classes in the same hierarchical tree may have methods with the same name but different behaviors.

Let's look at a simple example.

class Creature():
    def move(self):
        print("the creature moves")

class Dragon(Creature):
    def move(self):
        print("the dragon flies")

class Kraken(Creature):
    def move(self):
        print("the kraken swims")

for creature in [Creature(), Dragon(), Kraken()]:
    creature.move()

# prints:
# the creature moves
# the dragon flies
# the kraken swims

The Dragon and Kraken child classes are overriding the behavior of their parent class's move() method.

			Create object calls __init__ function

   def in_area(self, x1, y1, x2, y2):
        area = Rectangle(x1, y1, x2, y2)
        return self.__hit_box.overlaps(area)


			Polymorphism Review


ake a look at the Greek roots of the word "polymorphism".

"poly" means "many".
"morph" means "to change" or "form".

Polymorphism in programming is the ability to present the same interface (function or method signatures) for many different underlying forms (data types).

A classic example is a Shape class that Rectangle, Circle, and Triangle can inherit from. With polymorphism, each of these classes will have different underlying data. The circle needs its center point coordinates and radius. The rectangle needs two coordinates for the top left and bottom right corners. The triangle needs coordinates for the corners.

By making each class responsible for its data and its code, you can achieve polymorphism. In the shapes example, each class would have its own draw_shape() method. This allows the code that uses the different shapes to be simple and easy, and more importantly, it can treat shapes as the same even though they are different. It hides the complexities of the difference behind a clean abstraction.

shapes = [Circle(5, 5, 10), Rectangle(1, 3, 5, 6)]
for shape in shapes:
    print(shape.draw_shape())

This is in contrast to the functional way of doing things where you would have had separate functions that have different function signatures, like draw_rectangle(x1, y1, x2, y2) and draw_circle(x, y, radius).

			Wait, what is a "function signature"?


A function signature (or method signature) includes the name, inputs, and outputs of a function or method. For example, hit_by_fire in the Human and Archer classes have identical signatures.

class Human:
    def hit_by_fire(self):
        self.health -= 5
        return self.health

class Archer:
    def hit_by_fire(self):
        self.health -= 10
        return self.health

Both methods have the same name, take 0 inputs, and return integers. If any of those things were different, they would have different function signatures.

Here is an example of different signatures:

class Human:
    def hit_by_fire(self):
        self.health -= 5
        return self.health

class Archer:
    def hit_by_fire(self, dmg):
        self.health -= dmg
        return self.health

The Archer class's hit_by_fire method takes an input, dmg, which is used to calculate the new health. This is a different signature than the Human class's hit_by_fire method, which takes no inputs. Calling two methods with the same signature should look the same to the caller.

# same inputs (none)
# same name
# same outputs (a single integer)
health = sam.hit_by_fire()
health = archer.hit_by_fire()

			When overriding methods, use the same function signature


If you change the function signature of a parent class when overriding a method, it could be a disaster. The whole point of overriding a method is so that the caller of your code doesn't have to worry about what different things are going on inside the methods of different object types.


			Operator Overloading


Another kind of built-in polymorphism in Python is the ability to override how an operator works. For example, the + operator works for built-in types like integers and strings.

print(3 + 4)
# prints "7"

print("three " + "four")
# prints "three four"

Custom classes on the other hand don't have any built-in support for those operators:

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y


p1 = Point(4, 5)
p2 = Point(2, 3)
p3 = p1 + p2
# TypeError: unsupported operand type(s) for +: 'Point' and 'Point'

However, we can add our own support! If we create an __add__(self, other) method on our class, the Python interpreter will use it when instances of the class are being added with the + operator. Here's an example:

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __add__(self, point):
        x = self.x + point.x
        y = self.y + point.y
        return Point(x, y)

p1 = Point(4, 5)
p2 = Point(2, 3)
p3 = p1 + p2
# p3 is (6, 8)

Now, when p1 + p2 is executed, under the hood the Python interpreter just calls p1.__add__(p2).

			Operator Overload Review


As we discussed in the last assignment, operator overloading is the practice of defining custom behavior for standard Python operators. Here's a list of how the operators translate into method names.

Operation	Operator	Method
Addition	+		__add__
Subtraction	-		__sub__
Multiplication	*		__mul__
Power		**		__pow__
Division	/		__truediv__
Floor Division	//		__floordiv__
Remainder (modulo)	%	__mod__
Bitwise Left Shift	<<	__lshift__
Bitwise Right Shift	>>	__rshift__
Bitwise AND	&		__and__
Bitwise OR	|		__or__
Bitwise XOR	^		__xor__
Bitwise NOT	~		__invert__

			Overloading Built-in Methods


Last but not least, let's take a look at some of the built-in methods we can overload in Python. While there isn't a default behavior for the arithmetic operators like we just saw, there is a default behavior for printing a class.

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y


p1 = Point(4, 5)
print(p1)
# prints "<Point object at 0xa0acf8>"

That's not super useful! Let's teach instances of our Point object to print themselves. The __str__ method (short for "string") lets us do just that. It takes no inputs but returns a string that will be printed to the console when someone passes an instance of the class to Python's print() function.

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __str__(self):
        return f"({self.x},{self.y})"

p1 = Point(4, 5)
print(p1)
# prints "(4,5)"

Note: the __repr__ method works in a similar way, you'll see it from time to time.
















