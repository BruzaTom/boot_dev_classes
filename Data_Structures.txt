                
                Introduction to Data Structures


Starting with this chapter, we're going to focus on how we can store and organize data in a way that allows for even better algorithms.

Data structures are just organizational tools that allow for more advanced algorithms. Some examples:

Stacks: Last in, first out.
Queues: First in, first out.
Linked Lists: A chain of nodes, efficient for inserts and deletes.
Binary Trees: A tree where each node has up to two children.
Red Black Trees: A self-balancing binary tree using colors.
Hashmaps: A data structure that maps keys to values.
Tries: A tree used for storing and searching words efficiently.
Graphs: A collection of nodes connected by edges.

Assignment
LockedIn needs some additional features to help keep track of the items inside of it.

Implement the count_marketers function. It should accept a list of strings (job titles) and return the number of "marketers" in the list.

count = count_marketers(['programmer', 'marketer', 'doctor', 'marketer'])
print(count)
# prints "2"

                What Are Data Structures?


A data structure is a data organization, management, and storage format that enables efficient access and modification. More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.

-- Wikipedia Definition

In other words, a data structure:

Stores data
Organizes data so that it can easily be accessed and modified
Contains algorithmic functions to expose the ability to read and modify the data

you're already familiar with some of Python's built-in, simple data structures:

List: An ordered collection of items
animals = ['cat', 'dog', 'mouse']

Dictionary: Collections of key/value pairs
car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

                Lists


Okay, we know what lists are, but from a data structures and algorithms perspective, what are they good for? Let's break it down by operation:

Append: Appending an element to the end of a list, e.g. cars.append("ford") is (on average) O(1). We go directly to the end and add the element.

Index: Accessing an element by index, e.g. cars[2] is O(1). We go directly to the index and return the element.

Delete: Removing an element from the middle of a list, e.g. cars.pop(2) is O(n). We have to shift all the elements after the deleted element down one index.

Search: Searching for an element in a list, e.g. cars.index("ford") is O(n). We have to iterate over the list until we find the element.

In other words, lists start to struggle in two primary areas:

When you need to frequently delete elements from the middle of the list
When you need to frequently search for specific elements in the entire list

Assignment
We need to display the last place a user worked on their profile.

Implement the last_work_experience function. It should take a list of our player's work history (strings) and return the last place they worked.

If the list is empty, return None.


                Lists Quiz


Answer the questions based on this code from the last assignment:

def last_work_experience(work_experiences):
    if len(work_experiences) > 0:
        return work_experiences[len(work_experiences) - 1]
    return None

Looking up an item in a list by index is much faster than searching for items using iteration. O(1) vs O(n).

What is the Big-O complexity of the last_work_experience() function, where n is the length of the work_experiences array?

O(1)

Why is index-lookup so much faster than iteration?

the computer can jump straight to the location of an index - an index is like an adress of an item in a list.


                Stacks

                
A stack is a data structure that stores ordered items. It's like a list, but its design is more restrictive. It only allows items to be added or removed from the top of the stack:

It's called a "stack" because it behaves just like a stack of physical items. Imagine a stack of plates: it's easy to take an item off the top of the stack, but you can't really get to the items in the middle or at the bottom without removing the items on top first. You'll often hear a stack referred to as a LIFO (last in, first out) data structure.

Whoever decided to take this simple concept and slap a nasty acronym on it should be forced to program in Prolog for the rest of their days.

Assignment
In this chapter we'll build a stack from scratch! A stack will be useful at LockedIn when we need undo/redo functionality. For example, a user can add other users to their "connections" list, and then undo the last connection they added. Stacks are a great way to implement undo functionality.

For now, we'll just focus on two methods: push and size. Notice that the Stack class already has a constructor and the underlying List that we'll use to store items.

Complete the push method. It should add an item to the top of the stack. The "top" of the stack is the end of the list in our implementation.
Complete the size method. It should return the number of items in the stack.

Stack Speed
You might be wondering, "why would I use a stack instead of a list?". "Isn't this just a list with fewer features?".

And you'd be right! A stack is a list with fewer features, but that's the point. By restricting the ways we can interact with the data, we guarantee that certain operations are blazingly fast. Here are all the operations a typical stack supports, along with their Big O time complexity:

Operation	Big O	Description
push	O(1)	Add an item to the top of the stack
pop	O(1)	Remove and return the top item from the stack
peek	O(1)	Return the top item from the stack without modifying the stack
size	O(1)	Return the number of items in the stack

t's all O(1)! That means no matter how many items are in the stack, these operations will always take the same amount of time. Stacks are really fast and are usually the best choice when the behavior of a stack is all you need.

Which operation is O(1)?
all of them

Where can items be added to and removed from a stack?
top

          Stack Review


All supported operations are O(1) by themselves. However, some tasks, like getting to an item at the bottom of the stack have a higher time complexity because they require multiple pop operations.
Stack operations are limited: no searching, no sorting, no random access
Stacks, like all abstract data types, can store items of any type. What makes it a stack is the behavior of the operations, not the type of data it stores.
Stacks are often used in the real world for:
Function call management
Undo/redo functionality
Expression evaluation
Browser history

What can be stored in a stack?
any things

If you want to get to an item at the bottom of a stack, what is the Big-O to retrieve that item?
O(n) because all other items need to be popped first

            Using a Stack


LockedIn supports a basic scripting language. It allows technically savvy HR managers to write scripts that can automate repetitive tasks on the platform. The language makes use of parentheses to group operations together, and we need to be able to check if the parentheses in a script are balanced.

Balanced Parentheses
Parentheses are balanced when each parenthesis has a corresponding parenthesis, and the pairs of parentheses are properly nested. For example:

()
()()
((()))
(()(()))

Unbalanced Parentheses

(
())
(()()
(()))

Assignment
Complete the is_balanced function.

It takes a string as input and returns True if the parentheses in the string are balanced, and False otherwise. Use an instance of the provided Stack class in stack.py to keep track of the parentheses.

Note: You only need to consider the characters ( and ) for this challenge.


        What Is a Queue?


A queue stores ordered items... again, kind of like a list, but again, like a stack, its design is more restrictive. A queue only allows items to be added to the tail of the queue and removed from the head of the queue.

It's called a "queue" because it behaves like a queue of people waiting in line to order coffee.

The first person to get in line is also the first person to be served (get out of line). So, you'll often hear a queue referred to as a FIFO (first in, first out) data structure.


        Queue Class


Assignment
LockedIn uses a Queue to keep track of the order that recruiters should use to reach out to job seekers.

Implement the following operations on the Queue class:

queue.push(item): Adds an item to the tail of the queue (index 0 of list)
queue.pop(): Removes and returns an item from the head of the queue (last index of list)
queue.peek(): Returns an item from the head of the queue
queue.size(): Returns the number of items in the queue

Note: You'll often hear words used interchangeably in programming. For example, here we're saying push and pop, but enqueue and dequeue are also common words for the same ideas.

term 1	  term 2	  description
Push	    Enqueue	  Adds an item to the tail of the queue
Pop	      Dequeue	  Removes and returns an item from the head of the queue

Tips
The underlying data type we're using is just a List. Don't forget to guard against IndexErrors by returning 'None' if the queue is empty.
The .insert List method may be helpful.


        Queue Speed


So how fast are queue operations? Well, in an optimized queue, they'd be:

Operation	Big O	Description
push	O(1)	Add an item to the back of the queue
pop	  O(1)	Remove and return the front item from the queue
peek	O(1)	Return the front item from the queue without modifying the queue
size	O(1)	Return the number of items in the queue

Just like a stack, all operations are O(1)! No matter how many items are in the queue, these operations will always take the same amount of time. The reason to choose a queue over a stack is all about ordering. Queues should be used when you need to process items in the order they were added.

LIFO (stack) vs FIFO (queue).

A Problem
Our current Queue class has a problem... take a look at the push method:

def push(self, item):
    self.items.insert(0, item)

It's not O(1)! The List's insert method has to shift all the other items in the list down to make room for the new item.

We'll solve this very solvable problem soon...

What is the Big O complexity of the push, pop, peek, and size operations of an optimized queue?
O(1)

If an item could be anywhere in a queue, what is the Big O complexity to retrieve that item?
O(n) because you might have to pop all the items in the queue

Why is our list-based queue's push operation O(n)?
because you have to move all the elements over by one index to make room for the new element


                Matchmaking Queue


In LockedIn, users that are founding companies can join a matchmaking queue to find potential co-founders for their projects. We'll use the Queue class we've built to manage the matchmaking process.

Notice the search_and_remove method on the Queue class (in queue.py). It breaks the rules of a traditional queue data structure but will be useful in solving this real-world problem.

It's okay to violate academic constraints as software engineers as long as we understand the trade-offs involved.

Assignment
Complete the matchmake function that simulates users joining and leaving the matchmaking queue. The function should take a queue instance and a user tuple containing a name and action (either "join" or "leave"):

user = ('Bob', 'join')
user = ('Alice', 'leave')

For each call to matchmake:

If the action is "leave", search the queue for the user and remove them if they are in the queue.

If the action is "join", push the user's name onto the queue.

Lastly, check if the queue has at least 4 users in it. If so, pop the first 2 users from the queue and return the following string:

"{user1} matched {user2}!"

Where user1 is the first user popped and user2 is the second user popped.

If there were less than 4 users in the queue, return the following string: "No match found"


                Linked Lists


Remember how the push method on our Queue is O(n) instead of O(1)?

def push(self, item):
    # everything in self.items has to shift
    # up a position, which takes O(n) time
    self.items.insert(0, item)

Let's fix that.

To build a faster queue, we'll use a Linked List instead of a regular List (array) under the hood. A linked list is where elements are not stored next to each other in memory, instead, each item references the next in a chain.

        Nodes

Our nodes will be represented by a simple class with two fields:

val - The raw string value that the node holds (e.g. 'Carla', 'James', etc)
next - A reference to the next node in the list

Assignment
Let's lock-in and make LockedIn faster!

Complete the Node's constructor. Set its val field to the provided value and its next field to None.
Complete the Node's set_next method. It should set the next field to the provided node.


                Linked List vs. List


A linked list is a collection of ordered items, so it's similar to a "normal" list (also called an "array" or "slice" in other languages).

see images/linked_list_1

Items in a "normal" list are stored next to each other in memory, and to get an item from a normal List we have to use a numbered index:

car = cars[420]

You can think of the "index" as simply an offset from the start. The cars list in this example refers to the start of the list, and 420 is just the 420th item in that section of memory. With a normal list, all the data is stored in the same place in memory and the index is just a way to find the right spot.

In a linked list, there are no indexes! Each node contains two things: the data itself, and a reference to the next node in the list. Iterating over a linked list requires starting at the head node and following the next references until you reach the end.

current_car_node = head_car_node
while current_car_node is not None:
    print(current_car_node.val)
    current_car_node = current_car_node.next

Frankly, linked lists can be annoying to use and incur more overhead, so why use a linked list at all? It's because sometimes linked lists are much faster to make updates to, particularly when inserting or deleting items from the middle.

In a normal list, if you insert an item in the middle, you have to shift all the items after it down one spot, which takes O(n) time:

see images/linked_list_2

In a linked list, once you've traversed to a given node, insertion is (O(1)) because you can simply update two references:

see images/linked_list_3

questons:

You can find an item in a linked list by...
iiterating through all the nodes by following the 'next' reffrences

Linked lists have a faster time complexity than regular lists when it comes to...
inserting/deleting items  in the middle of the list


                Iterating


Even though iterating with linked lists kinda sucks compared to the simplicity of arrays (normal lists), we've got to do it. Although the implementation is more complex and slow, we can still make it easy for users of our class by providing an __iter__ method.

        The yield Keyword

The yield keyword in Python returns a value, kind of like return. However, it's used to turn the function into a generator function.

A generator function creates a new function object. When that function is called, it executes the code in the generator function until it hits a yield statement. At that point, the function pauses and returns the value of the yield statement. The next time the function is called, it picks up right where it left off.

def create_message_generator():
    yield "hi"
    yield "there"
    yield "friend"

gen = create_message_generator()
first = next(gen)
print(first)  # prints: hi
second = next(gen)
print(second)  # prints: there
third = next(gen)
print(third)  # prints: friend

Every time you call create_message_generator(), it creates a new generator instance. To continue from where you left off, you need to assign this generator to a variable (like gen in the example above). This way, when you use next() or loop over the generator, you’re continuing with the same instance rather than starting a new one.

Assignment
The LinkedList class is a wrapper class that uses the Node class we already wrote.

Complete the __init__ method. It should set the head field to None.
No other node points to the linked list's head (first) node, so the LinkedList class itself needs to keep track of it. We'll use the term head and tail like this:

head node -> node -> node -> node -> tail node

The direction of flow above might feel opposite to what you're used to with a Queue, but it's really the same. Above I'm using arrows to show which nodes are pointing to which other nodes. In a future lesson when we implement a Queue using a LinkedList, we'll add elements to the tail and remove elements from the head.

Complete the __iter__ method. It should be a generator function that yields each node in the linked list, from the head to the tail. By overriding the __iter__ method, Python will allow us to use a for loop to iterate over the linked list:

ll = LinkedList()
ll.add("first")
ll.add("second")
ll.add("third")
for val in ll:
    print(val)

Create a reference to the head node (e.g. node = self.head)
Use a while loop to iterate over the linked list until node is None
Yield the current node
Set node to the next node

By overriding the __iter__ method, Python will allow us to use a for loop to iterate over the linked list:

ll = LinkedList()
ll.add("first")
ll.add("second")
ll.add("third")
for val in ll:
    print(val)





                Add to Tail


Time to allow our LinkedList to add new nodes to the end of the list. Kind of like a regular Python List's .append method.


Assignment

Complete the add_to_tail method. It adds a new node to the end of the list and returns nothing.

[see images/add_to_tail.png]

    If there isn't a head node, set the new node as the head and be done.
    Otherwise, keep a reference to the "last" node in the list - start with it set to None.
    Iterate over the linked list (we built this already!)
        Update your "last" node reference to the current node
    Once you've iterated over the entire list, your "last" reference should be the last node in the list (the "tail"). Set the next field of the "last" node to the new node.


              Add to Head


For added flexibility, let's allow users to add items to the front of our linked list as well.
Assignment

Implement the add_to_head method. It should add a new node to the front of the list and return nothing.

    Set the "next" field of the given node to the current head node.
    Update the head reference to the given node.

