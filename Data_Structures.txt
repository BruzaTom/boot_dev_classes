                
                Introduction to Data Structures


Starting with this chapter, we're going to focus on how we can store and organize data in a way that allows for even better algorithms.

Data structures are just organizational tools that allow for more advanced algorithms. Some examples:

Stacks: Last in, first out.
Queues: First in, first out.
Linked Lists: A chain of nodes, efficient for inserts and deletes.
Binary Trees: A tree where each node has up to two children.
Red Black Trees: A self-balancing binary tree using colors.
Hashmaps: A data structure that maps keys to values.
Tries: A tree used for storing and searching words efficiently.
Graphs: A collection of nodes connected by edges.

Assignment
LockedIn needs some additional features to help keep track of the items inside of it.

Implement the count_marketers function. It should accept a list of strings (job titles) and return the number of "marketers" in the list.

count = count_marketers(['programmer', 'marketer', 'doctor', 'marketer'])
print(count)
# prints "2"

                What Are Data Structures?


A data structure is a data organization, management, and storage format that enables efficient access and modification. More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.

-- Wikipedia Definition

In other words, a data structure:

Stores data
Organizes data so that it can easily be accessed and modified
Contains algorithmic functions to expose the ability to read and modify the data

you're already familiar with some of Python's built-in, simple data structures:

List: An ordered collection of items
animals = ['cat', 'dog', 'mouse']

Dictionary: Collections of key/value pairs
car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

                Lists


Okay, we know what lists are, but from a data structures and algorithms perspective, what are they good for? Let's break it down by operation:

Append: Appending an element to the end of a list, e.g. cars.append("ford") is (on average) O(1). We go directly to the end and add the element.

Index: Accessing an element by index, e.g. cars[2] is O(1). We go directly to the index and return the element.

Delete: Removing an element from the middle of a list, e.g. cars.pop(2) is O(n). We have to shift all the elements after the deleted element down one index.

Search: Searching for an element in a list, e.g. cars.index("ford") is O(n). We have to iterate over the list until we find the element.

In other words, lists start to struggle in two primary areas:

When you need to frequently delete elements from the middle of the list
When you need to frequently search for specific elements in the entire list

Assignment
We need to display the last place a user worked on their profile.

Implement the last_work_experience function. It should take a list of our player's work history (strings) and return the last place they worked.

If the list is empty, return None.