			WSL terminal

		SHELL

Shells do a lot of things, but their main job is to interpret the commands you type and execute them.
	
	REPL

Read
Eval (evaluate)
Print
Loop
		

		VARIABLES


	CREATE A VARIABLE

name="Lane"

	USE A VARIABLE

echo $name
# Lane

bankname="WorldBanc"
founded="1969"
ceo="Jeff Gates"
echo $bankname was founded in $founded by $ceo

	EXTRESSIONS

expr 123456 + 7890
# 131346

		HISTORY
	
	see the commands you've typed in the past. 


history

	NAVIGATE HISTORY

Once you've cycled back through your history with the "up" arrow, you can use the "down" arrow to cycle back to the most recent command.

	CLEAR

If your terminal is feeling cluttered with text, you can clear it with the clear command, or by pressing ctrl + l.

This won't delete your history, it will just clear the screen.

		FILESYSTEM

All the data stored on your computer is organized into files and directories. Files and directories are organized into a tree-like structure called a filesystem.
	
		print working directory

pwd
# /home/tom

	FILEPATHS

A filepath is a string that describes the location of a file or directory on your computer

/Users/wagslane

-The first slash (/) represents the root directory. It's the tippy-top of the filesystem tree.
-The next part (Users) is the name of a directory inside the root directory.
-Finally, the last part (wagslane) is the name of a directory inside the Users directory.

		change directory

Navigate back out of the worldbanc directory so that you're in its parent directory. If you're in the top level of the worldbanc directory, just type:

cd ..
cd ~ 
#^cd home
		ls command

list of directorys from the directory you are in or specify

ls worldbanc
# README.md  go.mod  private  public

		RELATIVE PATHS

vehicles
├── cars
│   ├── fords
│   │   ├── mustang.txt
│   │   └── focus.txt

When inside the top-level vehicles directory, the relative path to the mustang.txt file is:

cars/fords/mustang.txt

Or when inside the fords directory, just:

mustang.txt

		ABSOLUTE PATHS

An absolute path is a path that starts at the root of the filesystem.

The root is denoted by a forward slash /. So, if the vehicles directory is in the filesystem root, the absolute path to the mustang.txt file is

/vehicles/cars/fords/mustang.txt

when inside the fords directory, you can use either:

/vehicles/cars/fords/mustang.txt
or
mustang.txt

		THE CAT COMMAND

The cat command is used to view the contents of a file. It's short for "concatenate"

# Print the contents of a file to the terminal
cat file1.txt

# Concatenate the contents of multiple files and print them to the terminal
cat file1.txt file2.txt

		THE HEAD COMMAND

The head command prints the first n lines of a file, where n is a number you specify.
If you don't specify a number, it will default to 10.

head -n 10 file1.txt

		THE TAIL COMMAND

The tail command prints the last n lines of a file, where n is a number you specify.

tail -n 10 file1.txt

		MORE AND LESS

The more and less commands let you view the contents of a file one page (or line) at a time.

In the context of these commands, less is literally more. The less command does everything that the more command does but also has more features. As a general rule, you should use less instead of more.

less 2023.csv

		DIRECTORIES

		MKDIR COMMAND

The "make directory" command creates a new directory inside the current directory.

mkdir my_directory

		MOVE DIRECTORIES

The move command moves a file or directory from one location to another. You can use it to rename a file or to move it to a different directory altogether. Your working directory can't be the directory you're moving.

mv some_file.txt some_other_name.txt
or
mv some_file.txt some_directory/some_file.txt

If you don't want to rename the file and you're just moving it to a different directory, you can omit the filename:

mv some_file.txt some_directory/

		REMOVE

The remove command deletes a file or empty directory:

rm some_file.txt

You can optionally add a -r flag to tell the rm command to delete a directory and all of its contents recursively.

rm -r some_directory

		COPY

The copy command copies a file from one location to another.

cp source_file.txt destination/

You can also copy a directory and all of its contents recursively by adding the -R flag:

cp -R my_dir new_dir

		THE ~ ALIAS

So when I want to go home, I don't have to type out cd /Users/wagslane, I can just type:

cd ~

		DANGER

Your home directory is where you want to spend most of your time. Many of the other directories on your machine are critical to the operating system or other programs. Be careful when working in other directories like /bin, /etc, /var, etc.

		THE GREP COMMAND

The grep command allows you to search for text in files. It has a ton of capability, and we'll only be scratching the surface of its true power.

For example, if we wanted to search for the word "hello" in the file hello.txt, we could run:

grep "hello" hello.txt

This will print out every line in hello.txt that contains the word "hello". It's a case-sensitive search, so it will not match "Hello" or "HELLO".

*		The tab key 

If you start typing the name of a file or directory and then press tab, your shell will try to autocomplete the name for you. If there are multiple possible completions, it will show you a list of them.

		GREP MULTIPLE FILES

You can also search multiple files at once. 

grep "hello" hello.txt hello2.txt

		RECURSIVE SEARCH

If we wanted to search for the word "hello" in the current directory and all subdirectories, we could run:

grep -r "hello" .

Remember, . is a special alias for the current directory.
		
		FIND

Let's say you're looking for a file named hello.txt somewhere in your home directory. You can use the find command to search for exactly that title:

find some_directory -name hello.txt

		PATTERN SEARCH

The find command can also search for files that match a pattern. For example, if you wanted to find all files that end in .txt, you could run:

find some_directory -name "*.txt"

		The * character

wildcard that matches anything. If you're trying to find filenames that contain a specific word, you can use the * character to match the rest of the filename:

# Find all files that contain the word "chad"
find some_directory -name "*chad*"

		SUDO

The sudo keyword lets you run a command as a "superuser". It's short for "superuser do". To use it, you'll need a password with superuser privileges, which you should already have if you're the only user of your machine.

		PERMISSIONS

The permissions of an individual file or directory are visually represented as a 10-character string:

drwxrwxrwx

-: Regular file (e.g. -rwxrwxrwx)
d: Directory (e.g. drwxrwxrwx)

rwx: All permissions

rw-: Read and write, but not execute

r-x: Read and execute, but not write

The first 3 characters are "owner" permissions. The "owner" is usually just the user who created the file or directory, but it can be manually changed.

The next 3 characters are "group" permissions. Unix-like systems support groups of users and a file or directory can be assigned to a single group. To be honest, unless you're a system administrator, you won't often worry about groups.

The last 3 characters are "others" permissions. This is everyone else

-rwxrwxrwx: A file where everyone can do everything
-rwxr-xr-x: A file where everyone can read and execute, but only the owner can write
drwxr-xr-x: A directory where everyone can read (ls the contents) and execute (cd into it), but only the owner can write (modify the contents)
drwx------: A directory where only the owner can read, write and execute

		CHANGING PERMISSIONS

		The chmod command 

lets you change the permissions of a file or directory. It's short for "change mode" (I wish it was called "change permissions", but alas).

In the command below, u means "user" (aka "owner"), g means "group", and o means "others". The = means "set the permissions to the following", and the rwx means "read, write and execute". The g= and o= mean "set group and other permissions to nothing". The -R means "recursively", which means "do this to all of the contents of the directory as well".

chmod -R u=rwx,g=,o= DIRECTORY

Remember, . is a special alias for the current directory.

		-l FLAG

The ls command has a -l option (lowercase "L") that will print out the permissions of each file and directory in long format.

ls -l

		EXECUTABLES

Executable files are just programs that you can run on your computer.

Files with a .sh extension are shell scripts. They're just text files that contain shell commands. You can run a file in your shell by just typing its filepath:

mydir/program.sh

Interestingly, if the program is in the current directory (in this example, the mydir directory), you need to prefix it with ./:

./program.sh

		CHOWN

chmod allows you to change the permissions of any file or directory that you own. But what if you don't own the file or directory? That's where sudo is required. Let's change ownership of a directory to see how that works.

The chown command allows you to change the owner of a file or directory, and it requires root privileges.

sudo chown -R root contacts

-sudo chown -R root contacts
-sudo - Run as the root user
-chown - Command to change the owner
- -R - "Recursive", meaning also apply the changes to everything inside the directory
-root - The name of the new owner
-contacts - The directory to change the owner of

		The which command

The which command tells you the location of an installed command line program. In this case, we're asking for the location of the sh (shell) program.

which sh
# /usr/bin/sh

		SHEBANG

A "shebang" is a special line at the top of a script that tells your shell which program to use to execute the file.

The format of a shebang is:
#! interpreter [optional-arg]

For example, if your script is a Python script and you want to use Python 3, your shebang might look like this:

#!/usr/bin/python3

		BOURNE SHELL

sh - The Bourne shell. This is the original Unix shell and is POSIX-compliant. It's very basic and doesn't have many quality-of-life features.
bash - The Bourne Again shell. This is the most popular shell on Linux. It builds on sh, but also has a lot of extra features.
zsh - The Z shell. This is the most popular shell on macOS. Like bash, it does what sh can do, but also has a lot of extra features.

Both zsh and bash are "sh-compatible" shells, meaning they can run .sh scripts, but they also have extra features that generally make them more pleasant to use. For your purposes, the differences between zsh and bash are not super significant. Everything we do in this course will work in both shells.

		SHELL CONFIGURATION

Bash and Zsh both have configuration files that run automatically each time you start a new shell session. These files are used to set up your shell environment. They can be used to set up aliases, functions, and environment variables.

These files are located in your home directory (~) and are hidden by default. The ls command has a -a flag that will show hidden files:

ls -a ~

If you're using Bash, .bashrc is probably the file you want to edit.
If you're using Zsh, .zshrc is probably the file you want to edit.

		NANO

You can use the nano command to edit files in your shell:

nano ~/.bashrc

also write from shell to ~/.bashrc

echo 'export PATH=$PATH:$HOME/go/bin' >> ~/.bashrc

		ENVIRONMENT VARIABLES

There is another type of variable called environment variables. They are available to all programs that you run in your shell.

You can view all of the environment variables that are currently set in your shell with the command env.

If you want to set a variable in your shell, you can use the export command:

		the export command

export NAME="Lane"

You can then use the variable in your shell, just as before:

echo $NAME
# Lane

The interesting part is that programs and scripts you run in your shell can also use that variable:

		TIP

You can also temporarily set a variable for a single command, instead of exporting it (exporting means the variable will persist until you close the shell).

For example:

WARN_MESSAGE="this works too" ./warn.sh

		PATH

This is one of the most important lessons in this entire course! Listen up.

There are environment variables that are sort of "built-in" to your shell. By "built-in" I just mean that different programs and parts of your system know about them and use them. The PATH variable is one of those.

		WHY DO WE CARE ABOUT THE PATH?

If it weren't for the PATH, you'd have to remember the filesystem path of every executable you wanted to run. Instead of just running ls, you'd have to run /bin/ls (or whatever the location of the ls executable is on your system). That's not very convenient.

The PATH variable is a list of directories that your shell will look into when you try to run a command. If you type ls, your shell will look in each directory listed in your PATH variable for an executable called ls. If it finds one, it will just run it. If it doesn't, it will give you an error like: "command not found".

Take a look at your current PATH variable:

echo $PATH

/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/c/Windows/system32:/mnt/c/Windows:/mnt/c/Windows/System32/Wbem:/mnt/c/Windows/System32/WindowsPowerShell/v1.0/:/mnt/c/Windows/System32/OpenSSH/:/mnt/c/Users/thoma/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/thoma/AppData/Local/Programs/Microsoft VS Code/bin:/snap/bin

Your shell will look for executables in the following directories:

/usr/local/bin
/usr/bin
/bin
/usr/sbin
/sbin

		CHANGE YOUR PATH

A common problem you'll run into in the future is that you install a new program on your machine, but when you try to run it from your terminal, you get an error like:
		
$ my-new-program
-bash: my-new-program: command not found

Nine times out of ten, this is because the program is installed in a location that's not in your PATH variable. Oftentimes when you install a program using the CLI, it will print a message during the installation process that tells you where the command was installed. Don't let your eyes glaze over when your terminal prints important messages! Sometimes you just gotta rtfm.

		add a directory to your PATH

use the export command and reference the existing PATH variable:

export PATH="$PATH:/path/to/new"

The $PATH part is a reference to the existing PATH variable. The : separates the existing directories from the new directory (/path/to/new) that you're adding.

?? realpath command

		PATH CONFIG

the next time you restart your shell, it will be reset to its default value. You won't be able to use the worldbanc CLI Tool from anywhere unless you change your PATH variable permanently.

The most common way to do this is to add the same export command that you used in the last lesson to your shell's configuration file.

Edit your .zshrc / .bashrc file (whatever your shell config file is) and add an export command to the end of the file that adds the worldbanc/private/bin directory to your PATH variable.

		MAN

The man command is short for "manual". It's a program that displays the manual for other programs.

manuals and documentation should become more useful to you as you become a more experienced developer. They're not as scary as they seem when you actually take the time to read them.

		USING MAN

The man command will only work for programs that it has a manual for, but most built-in commands and Unix programs are supported. You just pass the name of the command you want to read the manual of as an argument. The most intuitive place to start, of course, is reading the manual-manual:

# open the man pages for the 'man' command
man man
	
		FLAGS

For example, the ls command can take a -l flag to show a "long" listing of files:

ls -l

The ls command can also take a -a flag to show "all" files, including hidden files:

ls -a

You can combine flags:

ls -al

		CONVENTIONS

Single-character flags are prefixed with a single dash (.e.g -a)
Multi-character flags are prefixed with two dashes (e.g. --help)
Sometimes the same flag can be used with a single dash or two dashes (e.g. -h or --help)

		the wc command

Use the wc command to count the number of lines, words, and bytes in the files specified by the File parameter.

		POSITIONAL ARGUMENTS

Programming languages have functions, and functions take arguments.

In a shell, commands (programs) can also take arguments. For example, the cd command takes a single argument (the directory to change to):

cd /home/wagslane

Other commands might take multiple arguments. For example, the mv command takes two arguments: the file to move, and the destination to move it to:

mv file.txt newfile.txt

		HELP

By convention, most production-ready CLI tools have a "help" option that will print out some information about how to use the tool. It's usually accessed with one of the following:

--help (flag)
-h (flag)
help (first positional argument)

The "help" output is often easier to parse than a full man page. It's usually more of a quick start guide than a full manual.

curl --help
#prints help menu for curl

		EXIT CODES

Exit codes (sometimes called "return codes" or "status codes") are how programs communicate back whether they ran successfully or not.

0 is the exit code for success. Any other exit code is an error. 9 times out of 10, if a non-zero exit code is returned (meaning an error) it will be 1, which is the "catch-all" error code.

Programs that call other programs use error codes to figure out if execution was successful. For example, if the Boot.dev server program exits with a non-zero exit code, we have another program that will automatically restart it and log the error.

In a shell, you can access the exit code of the last program you ran with the question mark (?) variable. For example, if you run a program that exits with a non-zero exit code, you can see what it was with the echo command:

ls ~
echo $?
# 0

ls /does/not/exist
echo $?
# 1

		the unset command

You can use the unset command to unset an environment variable:

unset ENV_VAR_NAME

Alternatively, you can set the environment variable to an empty string:

export ENV_VAR_NAME=""

		STANDARD OUTPUT

"Standard Output", usually called "standard out" or "stdout", is the default place where programs print their output. It's just a stream of data that prints to your terminal, but we'll talk later about how it can be redirected to other places.

		STANDARD ERROR

"Standard Error", usually called "stderr", is the same thing as standard output, but for error messages. It's a stream completely separate from stdout so that you can redirect it to a different place if need be, but by default, it prints to your terminal just like stdout.

		REDIRECTING STREAMS

You can redirect stdout and stderr to different places using the > and 2> operators. > redirects stdout, and 2> redirects stderr.

REDIRECT STDOUT TO A FILE

echo "Hello world" > hello.txt
cat hello.txt
# Hello world

REDIRECT STDERR TO A FILE

cat doesnotexist.txt 2> error.txt
cat error.txt
# cat: doesnotexist.txt: No such file or directory

		STANDARD IN

"Standard Input", usually called "standard in" or "stdin", is the default place where programs read their input. It's just a stream of data that programs can read from as they run.

All programming languages have a simple way to read from stdin. In Python, it's the input function:

# execution stops until the user types
# something (in this case "Lane") and presses enter
name = input("What is your name? ")

print("Hello,", name)
# Hello, Lane!
		
		read

in wsl read is the syntax command for inputs

echo "Please enter your name:"
read NAME

		PIPING

One of the most beautiful things about the shell is that you can pipe the output of one program into the input of another program. With this one simple concept, you can run incredibly powerful automation tasks.

		PIPE

The pipe operator is |. It's the character that looks like a vertical line. It's usually on the same key as the backslash (\) above the enter key. The pipe operator takes the stdout of the program on the left and "pipes" it into the stdin of the program on the right.

echo "Have you heard the tragedy of Darth Plagueis the Wise?" | wc -w
# 10

However, instead of that text being sent to your terminal, the pipe operator pipes it into the wc (word count) command. The wc command counts the number of words in the input it receives. The -w flag tells wc to only count words.

This only works because the wc command, like most shell commands, can optionally read from stdin instead of a filepath.

pipe example#

grep -R "Bob" /home/tom/worldbanc/private/transactions --exclude-dir="backups" | wc -l

#counts number of lines Bob was involved in

		INTERRUPT

Sometimes a program will get stuck and you'll want to stop it. Common reasons for this are:

-You made a typo in the command and it's not doing what you want
-It's trying to access the internet but you're not connected
-It's processing too much data and you don't want to wait for it to finish
-There is a bug in the program causing it to hang

		ctrl + c

In these cases, you can stop the program by pressing ctrl + c. This sends a "SIGINT" signal to the program, which tells it to stop.

		KILL

Sometimes a program is in such a bad state (or is so malicious) that it doesn't respond to the SIGINT, in which case the best option is to use another shell session (new terminal window) to manually kill the program.

SYNTAX

kill PID

PID stands for "process ID". Every process that's running on your machine has a unique ID. The ps, "process status" command can be used to list the processes running on your machine, and their IDs:

ps aux

The "aux" options just mean "show all processes, including those owned by other users, and show extra information about each process".

		find pid to kill

ps aux | grep malicious.sh
# displys info on malicious.sh program

kill 19293
# kills program associated with pid

		UNIX PHILOSOPHY

-Write programs that do one thing and do it well.
-Write programs to work together.
-Write programs to handle text streams, because that is a universal interface.

	1. WRITE PROGRAMS THAT DO ONE THING AND DO IT WELL

This is why programs like ls, grep, and less exist. They do one thing, and they do it well. They don't try to do too much.

ls lists files and directories
grep searches for text
less displays text

	2. WRITE PROGRAMS TO WORK TOGETHER

Because, at least according to the Unix Philosophy, programs should do one thing and do it well, it's easy to write programs that work together. For example, you can use grep to search for text in a file, and then pipe the output of grep into less to display the results interactively

	3. WRITE PROGRAMS TO HANDLE TEXT STREAMS, BECAUSE THAT IS A UNIVERSAL INTERFACE

This hearkens back to the point we talked about at the beginning of this course: the shell is a command-line (text) interface. Text-based interfaces are much more powerful and extensible than graphical interfaces. That's why developers have been using them for decades, and why what we can do with them looks like magic to the uninitiated.

		PACKAGE MANAGERS

A package manager is a software tool that helps you install other software. Its primary functions include:

Downloading software from official sources
Installing software
Updating software
Removing software
Managing dependencies
As a developer, you'll frequently use package managers to get access to the software you need to get your work done.

		APT (UBUNTU)

APT, or "Advanced Package Tool", is the primary package manager for Ubuntu. To be fair, you can use other package managers on Ubuntu, but APT is the default and most common.

If you're on WSL and Ubuntu, you'll be using APT.

		USING NEOVIM

You can open a file with Neovim by passing in the file path as an argument:

nvim FILEPATH_HERE

Once it's open, you might notice that you can't type anything. That's because you're in "normal" mode, the mode for navigating and manipulating text. Use the arrow keys (I know, Vim sacrilege) to move your cursor down to the last line.

Enter "insert" mode by pressing the i key. You should see -- INSERT -- appear at the bottom of the screen. You should now be able to delete the password. Replace just the password with the text "REDACTED" in all caps, no quotes.

When you're done, press the esc key to return to normal mode. Then type :w and press enter to save your changes. Finally, type :q and press enter to quit Neovim.

You've successfully edited a file (and escaped from) Neovim

		PACKAGE MANAGER REVIEW

Apt and Brew aren't the only package managers out there. There are many, many more, though they do happen to be two of the most popular, especially on Linux and Mac OS.

		HOW DOES A PACKAGE MANAGER WORK?

When you type a command like apt install neovim, the package manager will:

-Check to see if the package is already installed.
-If it's not installed, it will download the package from a repository.
-It will install the package on your computer.
-It will install any dependencies that the package needs to run.
-It will (hopefully) add the package to your PATH if it should be there.

Good package managers keep track of what packages you have installed, and what versions of those packages you have installed. They keep your
filesystem nice and tidy, making sure you haven't installed 10 different instances of the same package or application.

For your edification, take a look at where your package manager installed nvim on your filesystem. The which command will help:

which nvim

		The which command 

The wich command is like pwd but nor your working directory

		WEBI

There is one more package manager (actually more of an anti-package manager) I want to introduce you to: Webi. Also known as webinstall.dev.

Webi lets you install command line tools directly from the web, with no need for a local command line tool like apt or brew. You don't need to install webi itself at all, instead, you just run a shell command that downloads and runs the tool's official installer script.

			create and add text to file

Just type the following command at the terminal prompt (replacing "sample.txt" with whatever you want to name your file), and then press Enter: cat > sample.txt After pressing Enter, you are not returned to the terminal prompt. Instead, the cursor is placed on the next line, and you can start entering text directly into your file.

			add text to existing file

cat - >> starwars.md

reminder*
ctrl+c eliminates the line its on
ctrl+d finishes right there

			TOUCH


The touch command is designed to update the access and modification timestamps of a file. By default, if the specified file does not exist, touch will create an empty file with the given filename. Because of this, you’ll often see this command used to quickly create new files.

touch new_file.txt

You can also create multiple files at once by listing them:

touch some_file.txt some_other_file.txt

touch can be very handy when writing scripts because it ensures certain files exist without altering existing ones, creating new files only if necessary.

			Pygame


Pygame is a module for developing games using Python. It provides simple functions and methods for us to easily draw images within a GUI window and handle user input.


			Virtual Environment (venv)


Virtual environments are Python's way to keep dependencies (e.g. the pygame module) separate from other projects on our machine. For example, we need pygame version 2 for this project, but another project on your computer might require version 1.

As a best practice, each Python project on your machine should have its own virtual environment to keep them isolated from each other.

1. Create a new directory and Git repository for this project somewhere on your computer.

2. Create a virtual environment at the top level of your project directory:

python3 -m venv venv

3. Activate the virtual environment:

source venv/bin/activate

4. You should see (venv) at the beginning of your terminal prompt, for example, mine is:

(venv) wagslane@MacBook-Pro-2 asteroids %

Note: make sure that your virtual environment is activated when running the game or using the bootdev CLI.

Create a file called requirements.txt in the top level of your project directory with the following contents:

pygame==2.6.0

This tells Python that this project requires pygame version 2.6.0.

5. Install the requirements:

pip install -r requirements.txt

pip is Python's package manager. It will install the pygame module into the virtual environment you created.

6. Make sure pygame is installed:

python3 -m pygame
